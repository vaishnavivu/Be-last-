#include <iostream>
#include <cstdlib>
#include <omp.h>

using namespace std;

const int size = 10000;

// Function to initialize an array with random values
void initializeArray(int arr[]) {
    #pragma omp parallel for
    for (int i = 0; i < size; ++i) {
        arr[i] = rand() % 10000;
    }
}

// Function to compute the minimum value in an array using parallel reduction
int parallelMin(int arr[]) {
    int min_val = arr[0];
    #pragma omp parallel for reduction(min:min_val)
    for (int i = 1; i < size; ++i) {
        if (arr[i] < min_val) {
            min_val = arr[i];
        }
    }
    return min_val;
}

// Function to compute the maximum value in an array using parallel reduction
int parallelMax(int arr[]) {
    int max_val = arr[0];
    #pragma omp parallel for reduction(max:max_val)
    for (int i = 1; i < size; ++i) {
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }
    return max_val;
}

// Function to compute the sum of elements in an array using parallel reduction
int parallelSum(int arr[]) {
    int sum = 0;
    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < size; ++i) {
        sum += arr[i];
    }
    return sum;
}

// Function to compute the average of elements in an array using parallel reduction
double parallelAverage(int arr[]) {
    int sum = parallelSum(arr);
    return static_cast<double>(sum) / size;
}

int main() {
    int arr[size];

    // Initialize array with random values
    initializeArray(arr);

    // Compute min, max, sum, and average using parallel reduction
    int min_val = parallelMin(arr);
    int max_val = parallelMax(arr);
    int sum = parallelSum(arr);
    double average = parallelAverage(arr);

    cout << "Minimum value: " << min_val << endl;
    cout << "Maximum value: " << max_val << endl;
    cout << "Sum of all elements: " << sum << endl;
    cout << "Average of all elements: " << average << endl;

    return 0;
}
