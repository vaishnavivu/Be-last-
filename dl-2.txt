dl-2
import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D

num_words = 10000
max_len = 100
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words)
x_train = pad_sequences(x_train, maxlen=max_len)
x_test = pad_sequences(x_test, maxlen=max_len)

model = Sequential([
    Embedding(num_words, 16, input_length=max_len),
    GlobalAveragePooling1D(),
    Dense(16, activation='relu'),
    Dense(1, activation='sigmoid')
])

model = Sequential([
    Embedding(num_words, 32, input_length=max_len),
    Flatten(),
    Dense(1, activation='sigmoid')])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

batch_size = 32
epochs = 5
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test))

def predict_sentiment(review):
    word_index = imdb.get_word_index()
    words = review.split()
    sequence = [word_index[word] + 3 for word in words if word in word_index and word_index[word] + 3 < num_words]
    sequence = pad_sequences([sequence], maxlen=max_len)
    prediction = model.predict(sequence)
    return "Positive" if prediction[0][0] >= 0.5 else "Negative"

reviews = [
    "The movie was fantastic, I loved every moment of it!",
    "The movie was terrible, I regret watching it.",
    "It was an average movie, nothing special.",
    "The best movie I've ever seen, highly recommended!"
]

for review in reviews:
    sentiment = predict_sentiment(review)
    print(f"Review: {review}")
    print(f"Sentiment: {'Positive' if sentiment else 'Negative'}\n")

